{"version":3,"sources":["Cell.js","quietPatterns.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","y","x","classes","isLit","className","onClick","Component","patterns","p1","p2","p3","solvable","board","p","sharedTrues","length","Board","state","hasWon","startingBoard","createBoard","fillTable","flipCellsAround","resetBoard","newGame","Array","from","nrows","ncols","Math","random","chanceLightStartsOn","checkSolvable","flipCell","forEach","coord","every","row","cell","setState","map","i1","key","val","i2","arr","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9473e38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick(evt) {\n\t\t// call up to the board to flip cells around this cell\n\t\tthis.props.flipCellsAroundMe(this.props.y, this.props.x);\n\t}\n\n\trender() {\n\t\tlet classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n\t\treturn <td className={classes} onClick={this.handleClick} />;\n\t}\n}\n\nexport default Cell;\n","const patterns = {\n    p1: [\n        [ true, false, true, false, true ],\n        [ true, false, true, false, true ],\n        [ false, false, false, false, false ],\n        [ true, false, true, false, true ],\n        [ true, false, true, false, true ]\n    ],\n    p2: [\n        [ true, true, false, true, true ],\n        [ false, false, false, false, false ],\n        [ true, true, false, true, true ],\n        [ false, false, false, false, false ],\n        [ true, true, false, true, true ]\n    ],\n    p3: [\n        [ false, true, true, true, false ],\n        [ true, false, true, false, true ],\n        [ true, true, false, true, true ],\n        [ true, false, true, false, true ],\n        [ false, true, true, true, false ]\n    ]\n};\n\nfunction solvable(board) {\n    for (const p in patterns) {\n        let sharedTrues = 0;\n        for (let y = 0; y < board.length; y++) {\n            for (let x = 0; x < board[y].length; x++) {\n                if (board[y][x] === true && patterns[p][y][x] === true) sharedTrues++;\n            }\n        }\n        if (sharedTrues % 2 !== 0) return false;\n    }\n    return true;\n}\n\nexport default solvable;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\nimport solvable from './quietPatterns';\n\nclass Board extends Component {\n    static defaultProps = {\n        ncols: 5,\n        nrows: 5,\n        chanceLightStartsOn: 0.5\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasWon: false,\n            board: []\n        };\n        this.startingBoard = this.createBoard();\n        this.fillTable = this.fillTable.bind(this);\n        this.flipCellsAround = this.flipCellsAround.bind(this);\n        this.resetBoard = this.resetBoard.bind(this);\n        this.newGame = this.newGame.bind(this);\n    }\n\n    componentDidMount() {\n        this.resetBoard();\n    }\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n    createBoard() {\n        let board;\n        do {\n            board = Array.from({ length: this.props.nrows }, () =>\n                Array.from({ length: this.props.ncols }, () => Math.random() < this.props.chanceLightStartsOn)\n            );\n        } while (!this.checkSolvable(board));\n        return board;\n    }\n\n    //  check board is solvable against quiet patterns\n    checkSolvable(board) {\n        return solvable(board) ? true : false;\n    }\n\n    /** handle changing a cell: update board & determine if winner */\n\n    flipCellsAround(y, x) {\n        let { ncols, nrows } = this.props;\n        let board = this.state.board;\n        let coords = [ [ y, x ], [ y + 1, x ], [ y - 1, x ], [ y, x + 1 ], [ y, x - 1 ] ];\n\n        function flipCell(y, x) {\n            // if this coord is actually on board, flip it\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                board[y][x] = !board[y][x];\n            }\n        }\n\n        // flip this cell and the cells around it\n        coords.forEach((coord) => {\n            flipCell(...coord);\n        });\n        //  determine is the game has been won\n        const hasWon = board.every((row) => row.every((cell) => !cell));\n        this.setState({ board, hasWon });\n    }\n\n    fillTable() {\n        return (\n            <table className='Board'>\n                <tbody>\n                    {this.state.board.map((row, i1) => (\n                        <tr key={i1}>\n                            {row.map((val, i2) => (\n                                <Cell key={`${i1}-${i2}`} y={i1} x={i2} isLit={val} flipCellsAroundMe={this.flipCellsAround} />\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        );\n    }\n\n    resetBoard() {\n        this.setState({ hasWon: false, board: this.startingBoard.map((arr) => [ ...arr ]) });\n    }\n    newGame() {\n        this.startingBoard = this.createBoard();\n        this.resetBoard();\n    }\n\n    /** Render game board or winning message. */\n\n    render() {\n        return (\n            <div>\n                {this.state.hasWon ? (\n                    <div className='winner'>\n                        <span className='neon-orange'>YOU</span>\n                        <span className='neon-blue'>WIN!</span>\n                        <div>\n                            <button className='reset-btn' onClick={this.newGame}>\n                                Play Again?\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div className='Board-title'>\n                            <div className='neon-orange'>Lights</div>\n                            <div className='neon-blue'>Out</div>\n                        </div>\n                        {this.fillTable()}\n                        <div>\n                            <button className='reset-btn' onClick={this.resetBoard}>\n                                Start Over\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}